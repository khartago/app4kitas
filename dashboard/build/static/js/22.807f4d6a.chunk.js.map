{"version":3,"file":"static/js/22.807f4d6a.chunk.js","mappings":"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","sources":["pages/admin/Gruppen.tsx","services/adminApi.ts"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useUser } from '../../components/UserContext';\nimport { fetchGroups, addGroup, assignEducators } from '../../services/adminApi';\nimport { Card, Button, Input, AnimatedMascotsLoader, ErrorMsg, Headline } from '../../components/ui/AdminDashboardUI';\n\nconst Gruppen: React.FC = () => {\n  const { benutzer } = useUser();\n  const [groups, setGroups] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [newGroup, setNewGroup] = useState('');\n  const [educatorId, setEducatorId] = useState('');\n  const [selectedGroup, setSelectedGroup] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (benutzer?.role !== 'ADMIN') return;\n    setLoading(true);\n    fetchGroups()\n      .then(setGroups)\n      .catch(() => setError('Fehler beim Laden der Gruppen.'))\n      .finally(() => setLoading(false));\n  }, [benutzer]);\n\n  const handleAddGroup = async () => {\n    if (!newGroup) return;\n    setLoading(true);\n    try {\n      await addGroup(newGroup);\n      setGroups(await fetchGroups());\n      setNewGroup('');\n    } catch {\n      setError('Fehler beim Hinzufügen der Gruppe.');\n    }\n    setLoading(false);\n  };\n\n  const handleAssignEducator = async () => {\n    if (!selectedGroup || !educatorId) return;\n    setLoading(true);\n    try {\n      await assignEducators(selectedGroup, [educatorId]);\n      setGroups(await fetchGroups());\n      setEducatorId('');\n      setSelectedGroup(null);\n    } catch {\n      setError('Fehler bei der Zuweisung.');\n    }\n    setLoading(false);\n  };\n\n  if (benutzer?.role !== 'ADMIN') return <ErrorMsg>Zugriff verweigert</ErrorMsg>;\n  if (loading) return <AnimatedMascotsLoader text=\"Lade Gruppen...\" />;\n  if (error) return <ErrorMsg>{error}</ErrorMsg>;\n\n  return (\n    <div>\n      <Headline>Gruppenverwaltung</Headline>\n      <Input\n        placeholder=\"Neue Gruppe\"\n        value={newGroup}\n        onChange={e => setNewGroup(e.target.value)}\n      />\n      <Button onClick={handleAddGroup}>Hinzufügen</Button>\n      <ul>\n        {groups.map(group => (\n          <Card key={group.id}>\n            <h3>{group.name}</h3>\n            <Button onClick={() => setSelectedGroup(group.id)}>Erzieher zuweisen</Button>\n          </Card>\n        ))}\n      </ul>\n      {selectedGroup && (\n        <div>\n          <Input\n            placeholder=\"Erzieher-ID\"\n            value={educatorId}\n            onChange={e => setEducatorId(e.target.value)}\n          />\n          <Button onClick={handleAssignEducator}>Zuweisen</Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Gruppen; ","import axios from 'axios';\n\nconst API_URL = '/api';\n\n// Holt Admin-Statistiken (Platzhalter, Backend-Route ggf. anpassen)\nexport const getAdminStats = async () => {\n  const res = await axios.get(`${API_URL}/admin/stats`, { withCredentials: true });\n  return res.data;\n};\n\n// Holt alle Gruppen\nexport const fetchGroups = async () => {\n  const res = await axios.get(`${API_URL}/groups`, { withCredentials: true });\n  return res.data;\n};\n\n// Fügt eine neue Gruppe hinzu\nexport const addGroup = async (data: any) => {\n  const res = await axios.post(`${API_URL}/groups`, data, { withCredentials: true });\n  return res.data;\n};\n\n// Weist Erzieher einer Gruppe zu (Platzhalter, Backend-Route ggf. anpassen)\nexport const assignEducators = async (groupId: string, educatorIds: string[]) => {\n  const res = await axios.put(`${API_URL}/groups/${groupId}/educators`, { educatorIds }, { withCredentials: true });\n  return res.data;\n};\n\n// Holt alle Kinder\nexport const fetchChildren = async () => {\n  const res = await axios.get(`${API_URL}/children`, { withCredentials: true });\n  return res.data;\n};\n\n// Fügt ein neues Kind hinzu\nexport const addChild = async (data: any) => {\n  const res = await axios.post(`${API_URL}/children`, data, { withCredentials: true });\n  return res.data;\n};\n\n// Bearbeitet ein Kind (Platzhalter, Backend-Route ggf. anpassen)\nexport const editChild = async (childId: string, data: any) => {\n  const res = await axios.put(`${API_URL}/children/${childId}`, data, { withCredentials: true });\n  return res.data;\n};\n\n// Bereits vorhandene Funktionen\nexport const getKinder = fetchChildren;\nexport const getGruppen = fetchGroups;\nexport const createKind = addChild;\nexport const createGruppe = addGroup;\n\n// Lädt ein Kinderfoto hoch\nexport const uploadChildPhoto = async (childId: string, file: File) => {\n  const formData = new FormData();\n  formData.append('photo', file);\n  const res = await axios.put(`${API_URL}/children/${childId}/photo`, formData, {\n    withCredentials: true,\n    headers: { 'Content-Type': 'multipart/form-data' }\n  });\n  return res.data;\n};\n\n// Holt alle Erzieher\nexport const fetchEducators = async () => {\n  const res = await axios.get(`${API_URL}/educators`, { withCredentials: true });\n  return res.data;\n};\n\n// Holt Check-in-Statistiken (Platzhalter, Backend-Route ggf. anpassen)\nexport const fetchCheckinStats = async () => {\n  const res = await axios.get(`${API_URL}/checkin/stats`, { withCredentials: true });\n  return res.data;\n};\n\n// --- GROUPS ---\n// Edit a group\nexport const editGroup = async (groupId: string, data: any) => {\n  const res = await axios.put(`${API_URL}/groups/${groupId}`, data, { withCredentials: true });\n  return res.data;\n};\n// Delete a group\nexport const deleteGroup = async (groupId: string) => {\n  const res = await axios.delete(`${API_URL}/groups/${groupId}`, { withCredentials: true });\n  return res.data;\n};\n// Export groups (CSV/PDF)\nexport const exportGroups = (format: 'csv' | 'pdf') => {\n  window.open(`${API_URL}/groups/export?format=${format}`, '_blank');\n};\n\n// --- CHILDREN ---\n// Edit a child (already present as editChild)\n// Delete a child\nexport const deleteChild = async (childId: string) => {\n  const res = await axios.delete(`${API_URL}/children/${childId}`, { withCredentials: true });\n  return res.data;\n};\n// Export children (CSV/PDF)\nexport const exportChildren = (format: 'csv' | 'pdf') => {\n  window.open(`${API_URL}/children/export?format=${format}`, '_blank');\n};\n\n// --- EDUCATORS (STAFF) ---\n// Add educator\nexport const addEducator = async (data: any) => {\n  const res = await axios.post(`${API_URL}/educators`, data, { withCredentials: true });\n  return res.data;\n};\n// Edit educator\nexport const editEducator = async (educatorId: string, data: any) => {\n  const res = await axios.put(`${API_URL}/educators/${educatorId}`, data, { withCredentials: true });\n  return res.data;\n};\n// Delete educator\nexport const deleteEducator = async (educatorId: string) => {\n  const res = await axios.delete(`${API_URL}/educators/${educatorId}`, { withCredentials: true });\n  return res.data;\n};\n// Export educators (CSV/PDF)\nexport const exportEducators = (format: 'csv' | 'pdf') => {\n  window.open(`${API_URL}/educators/export?format=${format}`, '_blank');\n};\n\n// Weitere Admin-APIs können hier ergänzt werden "],"names":["Gruppen","benutzer","useUser","groups","setGroups","useState","loading","setLoading","error","setError","newGroup","setNewGroup","educatorId","setEducatorId","selectedGroup","setSelectedGroup","useEffect","role","fetchGroups","then","catch","finally","_jsx","ErrorMsg","children","AnimatedMascotsLoader","text","_jsxs","Headline","Input","placeholder","value","onChange","e","target","Button","onClick","async","addGroup","_unused","map","group","Card","name","id","assignEducators","_unused2","API_URL","getAdminStats","axios","get","concat","withCredentials","data","post","groupId","educatorIds","put","fetchChildren","addChild","editChild","childId","uploadChildPhoto","file","formData","FormData","append","headers","fetchEducators","fetchCheckinStats","deleteChild","delete","exportChildren","format","window","open","addEducator","editEducator","deleteEducator","exportEducators"],"sourceRoot":""}