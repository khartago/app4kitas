{"version":3,"file":"static/js/868.a70ea1a9.chunk.js","mappings":"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","sources":["services/educatorApi.ts","pages/educator/Nachrichten.tsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = '/api';\n\n// Holt alle Gruppen für Erzieher\nexport const getGruppen = async () => {\n  const res = await axios.get(`${API_URL}/groups`, { withCredentials: true });\n  return res.data;\n};\n\n// Holt alle Kinder einer Gruppe\nexport const getKinderByGruppe = async (groupId: string) => {\n  const res = await axios.get(`${API_URL}/groups/${groupId}/children`, { withCredentials: true });\n  return res.data;\n};\n\n// Check-in/out für ein Kind\nexport const checkinKind = async (childId: string, type: 'IN' | 'OUT', method: 'QR' | 'MANUAL') => {\n  const res = await axios.post(`${API_URL}/checkin`, { childId, type, method }, { withCredentials: true });\n  return res.data;\n};\n\n// Holt die heutigen Kinder der Erziehergruppe\nexport const fetchTodaysChildren = async (groupId: string) => {\n  const res = await axios.get(`${API_URL}/groups/${groupId}/children?date=heute`, { withCredentials: true });\n  return res.data;\n};\n\n// Holt ausstehende Check-ins\nexport const fetchPendingCheckins = async (groupId: string) => {\n  const res = await axios.get(`${API_URL}/groups/${groupId}/pending-checkins`, { withCredentials: true });\n  return res.data;\n};\n\n// Holt zugewiesene Kinder\nexport const fetchAssignedChildren = async (educatorId: string) => {\n  const res = await axios.get(`${API_URL}/educators/${educatorId}/children`, { withCredentials: true });\n  return res.data;\n};\n\n// Holt die eigene Gruppe\nexport const fetchMyGroup = async (educatorId: string) => {\n  const res = await axios.get(`${API_URL}/educators/${educatorId}/group`, { withCredentials: true });\n  return res.data;\n};\n\n// Holt Nachrichten\nexport const fetchMessages = async (childId?: string, groupId?: string) => {\n  let url = `${API_URL}/messages`;\n  if (childId) url += `/child/${childId}`;\n  else if (groupId) url += `/group/${groupId}`;\n  const res = await axios.get(url, { withCredentials: true });\n  return res.data;\n};\n\n// Sendet eine Nachricht\nexport const sendMessage = async (data: { content?: string; childId?: string; groupId?: string; file?: File }) => {\n  const formData = new FormData();\n  if (data.content) formData.append('content', data.content);\n  if (data.childId) formData.append('childId', data.childId);\n  if (data.groupId) formData.append('groupId', data.groupId);\n  if (data.file) formData.append('file', data.file);\n  const res = await axios.post(`${API_URL}/message`, formData, {\n    headers: { 'Content-Type': 'multipart/form-data', withCredentials: true },\n  });\n  return res.data;\n};\n\n/**\n * Notizen eines Kindes abrufen\n * @param {string} childId\n * @returns {Promise<any[]>}\n */\nexport async function fetchChildrenNotes(childId: string): Promise<any[]> {\n  const res = await fetch(`${API_URL}/notes/child/${childId}`, {\n    credentials: 'include',\n  });\n  if (!res.ok) throw new Error('Fehler beim Laden der Notizen');\n  return res.json();\n}\n\n/**\n * Neue Notiz für ein Kind anlegen\n * @param {string} childId\n * @param {string} content\n * @param {File | null} [file]\n * @returns {Promise<any>}\n */\nexport async function addNote(childId: string, content: string, file?: File | null): Promise<any> {\n  const formData = new FormData();\n  formData.append('childId', childId);\n  formData.append('content', content);\n  if (file) formData.append('file', file);\n  const res = await fetch(`${API_URL}/notes`, {\n    method: 'POST',\n    credentials: 'include',\n    body: formData,\n  });\n  if (!res.ok) throw new Error('Fehler beim Speichern der Notiz');\n  return res.json();\n}\n\n// Weitere Erzieher-APIs können hier ergänzt werden ","import React, { useEffect, useState, useRef } from 'react';\nimport styled from 'styled-components';\nimport { useUser } from '../../components/UserContext';\nimport { fetchMessages, sendMessage } from '../../services/educatorApi';\nimport { Card, AnimatedMascotsLoader, ErrorMsg, Headline, Button, Input } from '../../components/ui/AdminDashboardUI';\nimport Header from '../../components/Header';\n\nconst Nachrichten: React.FC = () => {\n  const { benutzer } = useUser();\n  const [messages, setMessages] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [content, setContent] = useState('');\n  const [file, setFile] = useState<File | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (benutzer?.role !== 'EDUCATOR') return;\n    setLoading(true);\n    fetchMessages()\n      .then(setMessages)\n      .catch(() => setError('Fehler beim Laden der Nachrichten.'))\n      .finally(() => setLoading(false));\n  }, [benutzer]);\n\n  const handleSend = async () => {\n    if (!content && !file) return;\n    setLoading(true);\n    try {\n      await sendMessage({ content, file: file ?? undefined });\n      setMessages(await fetchMessages());\n      setContent('');\n      setFile(null);\n      if (fileInputRef.current) fileInputRef.current.value = '';\n    } catch {\n      setError('Fehler beim Senden der Nachricht.');\n    }\n    setLoading(false);\n  };\n\n  if (benutzer?.role !== 'EDUCATOR') return <ErrorMsg>Zugriff verweigert</ErrorMsg>;\n  if (loading) return <AnimatedMascotsLoader text=\"Lade Nachrichten...\" />;\n  if (error) return <ErrorMsg>{error}</ErrorMsg>;\n\n  return (\n    <>\n      <Header title=\"Nachrichten an Eltern\" />\n      <div style={{marginTop: 64}}>\n        <Input\n          placeholder=\"Nachricht\"\n          value={content}\n          onChange={e => setContent(e.target.value)}\n        />\n        <input\n          type=\"file\"\n          accept=\".pdf,image/*\"\n          ref={fileInputRef}\n          onChange={e => setFile(e.target.files?.[0] || null)}\n        />\n        <Button onClick={handleSend}>Senden</Button>\n        <ul>\n          {messages.map(msg => (\n            <Card key={msg.id}>\n              <p>{msg.content}</p>\n              {msg.fileUrl && <a href={msg.fileUrl} target=\"_blank\" rel=\"noopener noreferrer\">Anhang</a>}\n              <p>{msg.createdAt}</p>\n            </Card>\n          ))}\n        </ul>\n      </div>\n    </>\n  );\n};\n\nexport default Nachrichten; "],"names":["API_URL","fetchTodaysChildren","async","axios","get","concat","groupId","withCredentials","data","fetchPendingCheckins","fetchAssignedChildren","educatorId","fetchMyGroup","fetchMessages","childId","url","sendMessage","formData","FormData","content","append","file","post","headers","fetchChildrenNotes","res","fetch","credentials","ok","Error","json","addNote","method","body","Nachrichten","benutzer","useUser","messages","setMessages","useState","loading","setLoading","error","setError","setContent","setFile","fileInputRef","useRef","useEffect","role","then","catch","finally","_jsx","ErrorMsg","children","AnimatedMascotsLoader","text","_jsxs","_Fragment","Header","title","style","marginTop","Input","placeholder","value","onChange","e","target","type","accept","ref","_e$target$files","files","Button","onClick","undefined","current","_unused","map","msg","Card","fileUrl","href","rel","createdAt","id"],"sourceRoot":""}