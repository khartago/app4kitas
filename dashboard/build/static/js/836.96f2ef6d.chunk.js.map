{"version":3,"file":"static/js/836.96f2ef6d.chunk.js","mappings":"yPAEA,MAAMA,EAAU,OAGHC,EAAgBC,gBACTC,EAAAA,EAAMC,IAAI,GAADC,OAAIL,EAAO,gBAAgB,CAAEM,iBAAiB,KAC9DC,KAIAC,EAAcN,gBACPC,EAAAA,EAAMC,IAAI,GAADC,OAAIL,EAAO,WAAW,CAAEM,iBAAiB,KACzDC,KAIAE,EAAWP,gBACJC,EAAAA,EAAMO,KAAK,GAADL,OAAIL,EAAO,WAAWO,EAAM,CAAED,iBAAiB,KAChEC,KAIAI,EAAkBT,MAAOU,EAAiBC,WACnCV,EAAAA,EAAMW,IAAI,GAADT,OAAIL,EAAO,YAAAK,OAAWO,EAAO,cAAc,CAAEC,eAAe,CAAEP,iBAAiB,KAC/FC,KAIAQ,EAAgBb,gBACTC,EAAAA,EAAMC,IAAI,GAADC,OAAIL,EAAO,aAAa,CAAEM,iBAAiB,KAC3DC,KAIAS,EAAWd,gBACJC,EAAAA,EAAMO,KAAK,GAADL,OAAIL,EAAO,aAAaO,EAAM,CAAED,iBAAiB,KAClEC,KAIAU,EAAYf,MAAOgB,EAAiBX,WAC7BJ,EAAAA,EAAMW,IAAI,GAADT,OAAIL,EAAO,cAAAK,OAAaa,GAAWX,EAAM,CAAED,iBAAiB,KAC5EC,KAUAY,EAAmBjB,MAAOgB,EAAiBE,KACtD,MAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,QAASH,GAKzB,aAJkBjB,EAAAA,EAAMW,IAAI,GAADT,OAAIL,EAAO,cAAAK,OAAaa,EAAO,UAAUG,EAAU,CAC5Ef,iBAAiB,EACjBkB,QAAS,CAAE,eAAgB,0BAElBjB,MAIAkB,EAAiBvB,gBACVC,EAAAA,EAAMC,IAAI,GAADC,OAAIL,EAAO,cAAc,CAAEM,iBAAiB,KAC5DC,KAIAmB,EAAoBxB,gBACbC,EAAAA,EAAMC,IAAI,GAADC,OAAIL,EAAO,kBAAkB,CAAEM,iBAAiB,KAChEC,KAsBAoB,EAAczB,gBACPC,EAAAA,EAAMyB,OAAO,GAADvB,OAAIL,EAAO,cAAAK,OAAaa,GAAW,CAAEZ,iBAAiB,KACzEC,KAGAsB,EAAkBC,IAC7BC,OAAOC,KAAK,GAAD3B,OAAIL,EAAO,4BAAAK,OAA2ByB,GAAU,WAKhDG,EAAc/B,gBACPC,EAAAA,EAAMO,KAAK,GAADL,OAAIL,EAAO,cAAcO,EAAM,CAAED,iBAAiB,KACnEC,KAGA2B,EAAehC,MAAOiC,EAAoB5B,WACnCJ,EAAAA,EAAMW,IAAI,GAADT,OAAIL,EAAO,eAAAK,OAAc8B,GAAc5B,EAAM,CAAED,iBAAiB,KAChFC,KAGA6B,EAAiBlC,gBACVC,EAAAA,EAAMyB,OAAO,GAADvB,OAAIL,EAAO,eAAAK,OAAc8B,GAAc,CAAE7B,iBAAiB,KAC7EC,KAGA8B,EAAmBP,IAC9BC,OAAOC,KAAK,GAAD3B,OAAIL,EAAO,6BAAAK,OAA4ByB,GAAU,U,kICnH9D,MAAMQ,EAAYC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,sEAKtBC,EAAmBJ,EAAAA,GAAOC,IAAGI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,6FAM7BG,EAAUN,EAAAA,GAAOC,IAAGM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,kEAKpBK,EAASR,EAAAA,GAAOS,OAAMC,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,sGAMtBQ,EAAaX,EAAAA,GAAOC,IAAGW,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,oDAqG7B,EAhGgCU,KAC9B,MAAOC,EAAeC,IAAoBC,EAAAA,EAAAA,UAAgB,KACnDC,EAASC,IAAcF,EAAAA,EAAAA,UAAS,KAChCG,EAAeC,IAAoBJ,EAAAA,EAAAA,UAA+B,aAClEK,EAAaC,IAAkBN,EAAAA,EAAAA,UAAS,KACxCO,EAAWC,IAAgBR,EAAAA,EAAAA,UAAgB,KAC3CS,EAAQC,IAAaV,EAAAA,EAAAA,UAAgB,KACrCW,EAASC,IAAcZ,EAAAA,EAAAA,WAAS,IAChCa,EAAOC,IAAYd,EAAAA,EAAAA,UAAS,KAEnCe,EAAAA,EAAAA,WAAU,MAER7C,EAAAA,EAAAA,MAAiB8C,KAAKC,GAAOT,EAAaS,EAAIV,WAAaU,KAC3DhE,EAAAA,EAAAA,MAAc+D,KAAKC,GAAOP,EAAUO,EAAIR,QAAUQ,KACjD,KAGHF,EAAAA,EAAAA,WAAU,KACHV,IACLO,GAAW,GACXM,MAAM,sBAADpE,OAAuBuD,GAAe,CAAEc,YAAa,YACvDH,KAAKC,GAAOA,EAAIG,QAChBJ,KAAKhE,GAAQ+C,EAAiB/C,EAAK8C,eAAiB9C,IACpDqE,MAAM,IAAMtB,EAAiB,KAC7BuB,QAAQ,IAAMV,GAAW,MAC3B,CAACP,IAwBJ,OACEkB,EAAAA,EAAAA,MAACxC,EAAS,CAAAyC,SAAA,EACRC,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAAAF,SAAC,wBACVD,EAAAA,EAAAA,MAACjC,EAAO,CAAAkC,SAAA,EACND,EAAAA,EAAAA,MAAC/B,EAAM,CAACmC,MAAOxB,EAAeyB,SAAUC,IAAOzB,EAAiByB,EAAEC,OAAOH,OAAerB,EAAe,KAAOkB,SAAA,EAC5GC,EAAAA,EAAAA,KAAA,UAAQE,MAAM,WAAUH,SAAC,cACzBC,EAAAA,EAAAA,KAAA,UAAQE,MAAM,QAAOH,SAAC,eAExBD,EAAAA,EAAAA,MAAC/B,EAAM,CAACmC,MAAOtB,EAAauB,SAAUC,GAAKvB,EAAeuB,EAAEC,OAAOH,OAAOH,SAAA,EACxEC,EAAAA,EAAAA,KAAA,UAAQE,MAAM,GAAEH,SAAC,8BACE,aAAlBrB,GAAgCI,EAAUwB,IAAIF,IAC7CJ,EAAAA,EAAAA,KAAA,UAAmBE,MAAOE,EAAEG,GAAGR,SAAEK,EAAEI,MAAtBJ,EAAEG,KAEE,UAAlB7B,GAA6BM,EAAOsB,IAAIG,IACvCT,EAAAA,EAAAA,KAAA,UAAmBE,MAAOO,EAAEF,GAAGR,SAAEU,EAAED,MAAtBC,EAAEF,SAGnBP,EAAAA,EAAAA,KAACU,EAAAA,GAAK,CACJR,MAAO1B,EACP2B,SAAUC,GAAK3B,EAAW2B,EAAEC,OAAOH,OACnCS,YAAY,2BAEdX,EAAAA,EAAAA,KAACY,EAAAA,GAAM,CAACC,QA5CW3F,UACvB,GAAKsD,EAAQsC,QAAWlC,EAAxB,CACAO,GAAW,GACXE,EAAS,IACT,IACE,MAAMG,QAAYC,MAAM,0BAA2B,CACjDsB,OAAQ,OACRvE,QAAS,CAAE,eAAgB,oBAC3BkD,YAAa,UACbsB,KAAMC,KAAKC,UAAU,CAAEC,OAAQvC,EAAawC,MAAO,aAAcJ,KAAMxC,MAEzE,IAAKgB,EAAI6B,GAAI,MAAM,IAAIC,MAAM,sBAC7B7C,EAAW,IAEX,MAAMlD,QAAaiE,EAAIG,OACvBrB,EAAiB,CAAC/C,KAAS8C,GAC7B,CAAE,MAAAkD,GACAlC,EAAS,2CACX,CACAF,GAAW,EAlBgC,GA2CJqC,SAAUtC,IAAYV,EAAQsC,SAAWlC,EAAYmB,SAAC,cAI1FX,IAASY,EAAAA,EAAAA,KAAA,OAAKyB,MAAO,CAAEC,MAAO,MAAOC,aAAc,IAAK5B,SAAEX,KAC3DY,EAAAA,EAAAA,KAACrC,EAAgB,CAAAoC,SACdb,GACCc,EAAAA,EAAAA,KAAA,OAAAD,SAAK,eACsB,IAAzB1B,EAAcuD,QAChB9B,EAAAA,EAAAA,MAAC5B,EAAU,CAAA6B,SAAA,EACTC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAU,CAACC,KAAM,GAAIC,KAAK,UAC3B/B,EAAAA,EAAAA,KAAA,OAAAD,SAAK,0CAEL1B,EAAciC,IAAI0B,IACpBlC,EAAAA,EAAAA,MAACmC,EAAAA,GAAI,CAAAlC,SAAA,EACHC,EAAAA,EAAAA,KAAA,OAAKyB,MAAO,CAAES,WAAY,KAAMnC,SAAEiC,EAAEZ,OAAS,gBAC7CpB,EAAAA,EAAAA,KAAA,OAAAD,SAAMiC,EAAEhB,MAAQgB,EAAEG,QAClBnC,EAAAA,EAAAA,KAAA,OAAKyB,MAAO,CAAEC,MAAO,UAAWU,SAAU,IAAKrC,SAAEiC,EAAEK,MAAQL,EAAEM,cAHpDN,EAAEzB,U","sources":["services/adminApi.ts","pages/admin/Notifications.tsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = '/api';\n\n// Holt Admin-Statistiken (Platzhalter, Backend-Route ggf. anpassen)\nexport const getAdminStats = async () => {\n  const res = await axios.get(`${API_URL}/admin/stats`, { withCredentials: true });\n  return res.data;\n};\n\n// Holt alle Gruppen\nexport const fetchGroups = async () => {\n  const res = await axios.get(`${API_URL}/groups`, { withCredentials: true });\n  return res.data;\n};\n\n// Fügt eine neue Gruppe hinzu\nexport const addGroup = async (data: any) => {\n  const res = await axios.post(`${API_URL}/groups`, data, { withCredentials: true });\n  return res.data;\n};\n\n// Weist Erzieher einer Gruppe zu (Platzhalter, Backend-Route ggf. anpassen)\nexport const assignEducators = async (groupId: string, educatorIds: string[]) => {\n  const res = await axios.put(`${API_URL}/groups/${groupId}/educators`, { educatorIds }, { withCredentials: true });\n  return res.data;\n};\n\n// Holt alle Kinder\nexport const fetchChildren = async () => {\n  const res = await axios.get(`${API_URL}/children`, { withCredentials: true });\n  return res.data;\n};\n\n// Fügt ein neues Kind hinzu\nexport const addChild = async (data: any) => {\n  const res = await axios.post(`${API_URL}/children`, data, { withCredentials: true });\n  return res.data;\n};\n\n// Bearbeitet ein Kind (Platzhalter, Backend-Route ggf. anpassen)\nexport const editChild = async (childId: string, data: any) => {\n  const res = await axios.put(`${API_URL}/children/${childId}`, data, { withCredentials: true });\n  return res.data;\n};\n\n// Bereits vorhandene Funktionen\nexport const getKinder = fetchChildren;\nexport const getGruppen = fetchGroups;\nexport const createKind = addChild;\nexport const createGruppe = addGroup;\n\n// Lädt ein Kinderfoto hoch\nexport const uploadChildPhoto = async (childId: string, file: File) => {\n  const formData = new FormData();\n  formData.append('photo', file);\n  const res = await axios.put(`${API_URL}/children/${childId}/photo`, formData, {\n    withCredentials: true,\n    headers: { 'Content-Type': 'multipart/form-data' }\n  });\n  return res.data;\n};\n\n// Holt alle Erzieher\nexport const fetchEducators = async () => {\n  const res = await axios.get(`${API_URL}/educators`, { withCredentials: true });\n  return res.data;\n};\n\n// Holt Check-in-Statistiken (Platzhalter, Backend-Route ggf. anpassen)\nexport const fetchCheckinStats = async () => {\n  const res = await axios.get(`${API_URL}/checkin/stats`, { withCredentials: true });\n  return res.data;\n};\n\n// --- GROUPS ---\n// Edit a group\nexport const editGroup = async (groupId: string, data: any) => {\n  const res = await axios.put(`${API_URL}/groups/${groupId}`, data, { withCredentials: true });\n  return res.data;\n};\n// Delete a group\nexport const deleteGroup = async (groupId: string) => {\n  const res = await axios.delete(`${API_URL}/groups/${groupId}`, { withCredentials: true });\n  return res.data;\n};\n// Export groups (CSV/PDF)\nexport const exportGroups = (format: 'csv' | 'pdf') => {\n  window.open(`${API_URL}/groups/export?format=${format}`, '_blank');\n};\n\n// --- CHILDREN ---\n// Edit a child (already present as editChild)\n// Delete a child\nexport const deleteChild = async (childId: string) => {\n  const res = await axios.delete(`${API_URL}/children/${childId}`, { withCredentials: true });\n  return res.data;\n};\n// Export children (CSV/PDF)\nexport const exportChildren = (format: 'csv' | 'pdf') => {\n  window.open(`${API_URL}/children/export?format=${format}`, '_blank');\n};\n\n// --- EDUCATORS (STAFF) ---\n// Add educator\nexport const addEducator = async (data: any) => {\n  const res = await axios.post(`${API_URL}/educators`, data, { withCredentials: true });\n  return res.data;\n};\n// Edit educator\nexport const editEducator = async (educatorId: string, data: any) => {\n  const res = await axios.put(`${API_URL}/educators/${educatorId}`, data, { withCredentials: true });\n  return res.data;\n};\n// Delete educator\nexport const deleteEducator = async (educatorId: string) => {\n  const res = await axios.delete(`${API_URL}/educators/${educatorId}`, { withCredentials: true });\n  return res.data;\n};\n// Export educators (CSV/PDF)\nexport const exportEducators = (format: 'csv' | 'pdf') => {\n  window.open(`${API_URL}/educators/export?format=${format}`, '_blank');\n};\n\n// Weitere Admin-APIs können hier ergänzt werden ","import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport MascotBear from '../../components/ui/MascotBear';\r\nimport { Card, Headline, Button, Input } from '../../components/ui/AdminDashboardUI';\r\nimport { fetchEducators, fetchGroups } from '../../services/adminApi';\r\n\r\nconst Container = styled.div`\r\n  max-width: 900px;\r\n  margin: 0 auto;\r\n  padding: 32px 0;\r\n`;\r\nconst NotificationList = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n  margin-bottom: 32px;\r\n`;\r\nconst FormRow = styled.div`\r\n  display: flex;\r\n  gap: 12px;\r\n  margin-bottom: 16px;\r\n`;\r\nconst Select = styled.select`\r\n  padding: 8px 12px;\r\n  border-radius: 8px;\r\n  border: 1px solid #ccc;\r\n  font-size: 16px;\r\n`;\r\nconst EmptyState = styled.div`\r\n  text-align: center;\r\n  margin: 48px 0;\r\n`;\r\n\r\nconst Notifications: React.FC = () => {\r\n  const [notifications, setNotifications] = useState<any[]>([]);\r\n  const [message, setMessage] = useState('');\r\n  const [recipientType, setRecipientType] = useState<'educator' | 'group'>('educator');\r\n  const [recipientId, setRecipientId] = useState('');\r\n  const [educators, setEducators] = useState<any[]>([]);\r\n  const [groups, setGroups] = useState<any[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Fetch educators and groups for recipient selection\r\n    fetchEducators().then(res => setEducators(res.educators || res));\r\n    fetchGroups().then(res => setGroups(res.groups || res));\r\n  }, []);\r\n\r\n  // Fetch notifications for selected recipient\r\n  useEffect(() => {\r\n    if (!recipientId) return;\r\n    setLoading(true);\r\n    fetch(`/api/notifications/${recipientId}`, { credentials: 'include' })\r\n      .then(res => res.json())\r\n      .then(data => setNotifications(data.notifications || data))\r\n      .catch(() => setNotifications([]))\r\n      .finally(() => setLoading(false));\r\n  }, [recipientId]);\r\n\r\n  const sendNotification = async () => {\r\n    if (!message.trim() || !recipientId) return;\r\n    setLoading(true);\r\n    setError('');\r\n    try {\r\n      const res = await fetch('/api/notifications/send', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        credentials: 'include',\r\n        body: JSON.stringify({ userId: recipientId, title: 'Mitteilung', body: message }),\r\n      });\r\n      if (!res.ok) throw new Error('Fehler beim Senden');\r\n      setMessage('');\r\n      // Refresh notifications\r\n      const data = await res.json();\r\n      setNotifications([data, ...notifications]);\r\n    } catch {\r\n      setError('Fehler beim Senden der Benachrichtigung.');\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Headline>Benachrichtigungen</Headline>\r\n      <FormRow>\r\n        <Select value={recipientType} onChange={e => { setRecipientType(e.target.value as any); setRecipientId(''); }}>\r\n          <option value=\"educator\">Erzieher</option>\r\n          <option value=\"group\">Gruppe</option>\r\n        </Select>\r\n        <Select value={recipientId} onChange={e => setRecipientId(e.target.value)}>\r\n          <option value=\"\">Empfänger wählen...</option>\r\n          {recipientType === 'educator' && educators.map(e => (\r\n            <option key={e.id} value={e.id}>{e.name}</option>\r\n          ))}\r\n          {recipientType === 'group' && groups.map(g => (\r\n            <option key={g.id} value={g.id}>{g.name}</option>\r\n          ))}\r\n        </Select>\r\n        <Input\r\n          value={message}\r\n          onChange={e => setMessage(e.target.value)}\r\n          placeholder=\"Nachricht eingeben...\"\r\n        />\r\n        <Button onClick={sendNotification} disabled={loading || !message.trim() || !recipientId}>\r\n          Senden\r\n        </Button>\r\n      </FormRow>\r\n      {error && <div style={{ color: 'red', marginBottom: 12 }}>{error}</div>}\r\n      <NotificationList>\r\n        {loading ? (\r\n          <div>Lädt...</div>\r\n        ) : notifications.length === 0 ? (\r\n          <EmptyState>\r\n            <MascotBear size={80} mood=\"help\" />\r\n            <div>Keine Benachrichtigungen gefunden.</div>\r\n          </EmptyState>\r\n        ) : notifications.map(n => (\r\n          <Card key={n.id}>\r\n            <div style={{ fontWeight: 600 }}>{n.title || 'Mitteilung'}</div>\r\n            <div>{n.body || n.text}</div>\r\n            <div style={{ color: '#757575', fontSize: 14 }}>{n.date || n.createdAt}</div>\r\n          </Card>\r\n        ))}\r\n      </NotificationList>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Notifications; "],"names":["API_URL","getAdminStats","async","axios","get","concat","withCredentials","data","fetchGroups","addGroup","post","assignEducators","groupId","educatorIds","put","fetchChildren","addChild","editChild","childId","uploadChildPhoto","file","formData","FormData","append","headers","fetchEducators","fetchCheckinStats","deleteChild","delete","exportChildren","format","window","open","addEducator","editEducator","educatorId","deleteEducator","exportEducators","Container","styled","div","_templateObject","_taggedTemplateLiteral","NotificationList","_templateObject2","FormRow","_templateObject3","Select","select","_templateObject4","EmptyState","_templateObject5","Notifications","notifications","setNotifications","useState","message","setMessage","recipientType","setRecipientType","recipientId","setRecipientId","educators","setEducators","groups","setGroups","loading","setLoading","error","setError","useEffect","then","res","fetch","credentials","json","catch","finally","_jsxs","children","_jsx","Headline","value","onChange","e","target","map","id","name","g","Input","placeholder","Button","onClick","trim","method","body","JSON","stringify","userId","title","ok","Error","_unused","disabled","style","color","marginBottom","length","MascotBear","size","mood","n","Card","fontWeight","text","fontSize","date","createdAt"],"sourceRoot":""}