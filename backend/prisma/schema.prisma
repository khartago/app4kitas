generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  EDUCATOR
  PARENT
}

enum CheckType {
  IN
  OUT
}

enum CheckMethod {
  QR
  MANUAL
}

enum FileType {
  IMAGE
  PDF
}

// Institution (Kita) model
model Institution {
  id        String   @id @default(uuid())
  name      String
  address   String?
  admins    User[]   @relation("InstitutionAdmins")
  groups    Group[]
  children  Child[]
  channels  ChatChannel[]
  createdAt DateTime @default(now())
  openingTime String?
  closingTime String?
  closedDays  ClosedDay[]
  repeatedClosedDays Json?
  // New relations for logs and messages
  checkIns   CheckInLog[]
  messages   Message[]
  notifications NotificationLog[]
  // GDPR soft delete
  deletedAt  DateTime?
}

model User {
  id            String            @id @default(uuid())
  email         String            @unique
  password      String
  name          String
  phone         String?           // Phone number for parents
  role          Role
  avatarUrl     String?
  children      Child[]           @relation("ParentChildren")
  groups        Group[]           @relation("EducatorGroups")
  messages      Message[]         @relation("UserMessages")
  notifications NotificationLog[]
  sentNotifications NotificationLog[] @relation("NotificationSender")
  checkIns      CheckInLog[]      @relation("UserCheckIns")
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  deviceTokens  DeviceToken[]
  activityLogs  ActivityLog[]
  personalTasks PersonalTask[]
  notes         Note[]
  // Institution admin relation
  institution   Institution?      @relation("InstitutionAdmins", fields: [institutionId], references: [id])
  institutionId String?
  // Chat relations
  channels     ChatChannel[]      @relation("ChannelParticipants")
  directMessages1 DirectMessage[] @relation("DirectMessageUser1")
  directMessages2 DirectMessage[] @relation("DirectMessageUser2")
  reactions    MessageReaction[]  @relation("UserReactions")
  chatReadStatus ChatReadStatus[] @relation("UserChatReadStatus")
  // GDPR relations
  dataRestrictions DataRestriction[]
  dataObjections   DataObjection[]
  restrictionRequests DataRestriction[] @relation("RestrictionRequestedBy")
  objectionRequests  DataObjection[]   @relation("ObjectionRequestedBy")
  // GDPR soft delete
  deletedAt    DateTime?
}

model Child {
  id        String       @id @default(uuid())
  name      String
  birthdate DateTime
  photoUrl  String?
  parents   User[]       @relation("ParentChildren")
  group     Group?       @relation(fields: [groupId], references: [id])
  groupId   String?
  checkIns  CheckInLog[]
  messages  Message[]    @relation("ChildMessages")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  qrCodeSecret String    @unique
  institution   Institution @relation(fields: [institutionId], references: [id])
  institutionId String
  notes     Note[]
  // GDPR soft delete
  deletedAt DateTime?
}

model Group {
  id        String    @id @default(uuid())
  name      String
  // Institution relation
  institution   Institution @relation(fields: [institutionId], references: [id])
  institutionId String
  children  Child[]
  educators User[]    @relation("EducatorGroups")
  messages  Message[] @relation("GroupMessages")
  channel   ChatChannel? @relation("GroupChannel")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // GDPR soft delete
  deletedAt DateTime?
}

model CheckInLog {
  id        String      @id @default(uuid())
  child     Child       @relation(fields: [childId], references: [id])
  childId   String
  actor     User        @relation("UserCheckIns", fields: [actorId], references: [id])
  actorId   String
  type      CheckType
  timestamp DateTime    @default(now())
  method    CheckMethod
  institution   Institution @relation(fields: [institutionId], references: [id])
  institutionId String
  // GDPR soft delete
  deletedAt DateTime?
}

model Message {
  id        String    @id @default(uuid())
  sender    User      @relation("UserMessages", fields: [senderId], references: [id])
  senderId  String
  child     Child?    @relation("ChildMessages", fields: [childId], references: [id])
  childId   String?
  group     Group?    @relation("GroupMessages", fields: [groupId], references: [id])
  groupId   String?
  content   String
  fileUrl   String?
  fileType  FileType?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
  editedAt  DateTime?
  isEdited  Boolean   @default(false)
  // New fields for chat channels
  channel   ChatChannel? @relation("ChannelMessages", fields: [channelId], references: [id])
  channelId String?
  directMessage DirectMessage? @relation("DirectMessageMessages", fields: [directMessageId], references: [id])
  directMessageId String?
  // Reply functionality
  replyTo   Message? @relation("MessageReplies", fields: [replyToId], references: [id])
  replyToId String?
  replies   Message[] @relation("MessageReplies")
  // Reactions
  reactions MessageReaction[]
  institution   Institution @relation(fields: [institutionId], references: [id])
  institutionId String
  // GDPR soft delete
  deletedAt DateTime?
}

model MessageReaction {
  id        String   @id @default(uuid())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
  user      User     @relation("UserReactions", fields: [userId], references: [id])
  userId    String
  emoji     String   // The emoji character (üëç, ‚ù§Ô∏è, üòÑ, etc.)
  createdAt DateTime @default(now())
  
  @@unique([messageId, userId, emoji])
}

// New models for chat system
model ChatChannel {
  id        String   @id @default(uuid())
  name      String
  type      ChannelType
  institution Institution @relation(fields: [institutionId], references: [id])
  institutionId String
  group     Group?  @relation("GroupChannel", fields: [groupId], references: [id])
  groupId   String? @unique
  messages  Message[] @relation("ChannelMessages")
  participants User[] @relation("ChannelParticipants")
  readStatus ChatReadStatus[] @relation("ChannelReadStatus")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DirectMessage {
  id        String   @id @default(uuid())
  user1     User     @relation("DirectMessageUser1", fields: [user1Id], references: [id])
  user1Id   String
  user2     User     @relation("DirectMessageUser2", fields: [user2Id], references: [id])
  user2Id   String
  messages  Message[] @relation("DirectMessageMessages")
  readStatus ChatReadStatus[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([user1Id, user2Id])
}

// Track when users last read messages in chats
model ChatReadStatus {
  id        String   @id @default(uuid())
  user      User     @relation("UserChatReadStatus", fields: [userId], references: [id])
  userId    String
  // Either channelId or directMessageId will be set
  channel   ChatChannel? @relation("ChannelReadStatus", fields: [channelId], references: [id])
  channelId String?
  directMessage DirectMessage? @relation(fields: [directMessageId], references: [id])
  directMessageId String?
  lastReadAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, channelId])
  @@unique([userId, directMessageId])
}

enum ChannelType {
  GROUP_CHAT
  INSTITUTION_CHAT
  DIRECT_MESSAGE
}

model NotificationLog {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String
  body      String
  priority  String   @default("normal") // low, normal, high, urgent
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  sender    User?    @relation("NotificationSender", fields: [senderId], references: [id])
  senderId  String?
  institution   Institution @relation(fields: [institutionId], references: [id])
  institutionId String
  // GDPR soft delete
  deletedAt DateTime?
}

model DeviceToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
}

model FailedLogin {
  id        String   @id @default(uuid())
  email     String
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
}

model ClosedDay {
  id             String       @id @default(uuid())
  date           DateTime
  reason         String?
  institution    Institution  @relation(fields: [institutionId], references: [id])
  institutionId  String
  // GDPR soft delete
  deletedAt      DateTime?
}

model ActivityLog {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  action         String
  entity         String?
  entityId       String?
  details        String?
  institutionId  String?
  groupId        String?
  createdAt      DateTime @default(now())
  // GDPR soft delete
  deletedAt      DateTime?
}

model PersonalTask {
  id          String   @id @default(uuid())
  title       String
  description String?
  priority    String   @default("medium") // low, medium, high
  completed   Boolean  @default(false)
  dueDate     DateTime?
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // GDPR soft delete
  deletedAt   DateTime?
}

model Note {
  id             String   @id @default(uuid())
  content        String
  child          Child    @relation(fields: [childId], references: [id])
  childId        String
  educator       User     @relation(fields: [educatorId], references: [id])
  educatorId     String
  attachmentUrl  String?
  attachmentName String?
  attachmentType String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  // GDPR soft delete
  deletedAt      DateTime?
}

// GDPR Compliance Models

model DataRestriction {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  reason      String
  duration    Int      @default(30) // days
  requestedBy User     @relation("RestrictionRequestedBy", fields: [requestedById], references: [id])
  requestedById String
  status      String   @default("ACTIVE") // ACTIVE, EXPIRED, REMOVED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DataObjection {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  reason        String
  processingType String  // Type of processing being objected to
  requestedBy   User     @relation("ObjectionRequestedBy", fields: [requestedById], references: [id])
  requestedById String
  status        String   @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model DataBreach {
  id            String   @id @default(uuid())
  type          String   // Type of breach
  description   String
  affectedUsers Int      // Number of affected users
  discoveredAt  DateTime @default(now())
  reportedAt    DateTime @default(now())
  status        String   @default("REPORTED") // REPORTED, INVESTIGATING, RESOLVED
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
